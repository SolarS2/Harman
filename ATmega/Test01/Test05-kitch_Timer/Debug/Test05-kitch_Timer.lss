
Test05-kitch_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800112  00800112  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de4  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a29  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066b  00000000  00000000  00001ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000841  00000000  00000000  00002bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c1       	rjmp	.+878    	; 0x384 <__vector_5>
  16:	00 00       	nop
  18:	d6 c1       	rjmp	.+940    	; 0x3c6 <__vector_6>
  1a:	00 00       	nop
  1c:	f5 c1       	rjmp	.+1002   	; 0x408 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	04 c2       	rjmp	.+1032   	; 0x44a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e6 d0       	rcall	.+460    	; 0x290 <main>
  c4:	2b c2       	rjmp	.+1110   	; 0x51c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SegPort>:
char arr[5]; // // 세그먼트 이미지 정보를 담을 안전 영역
char* PA = &PORTD, *PB = &PORTC;
int sm =4;
void SegPort(char* p1, char* p2)
{
	PA = p1; PB = p2;
  c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
  cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
  d0:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
  d4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
  d8:	08 95       	ret

000000da <seg>:
}

void seg(int sel, uint8_t c)
{   *PB |= 0x0F;
  da:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
  de:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
  e2:	20 81       	ld	r18, Z
  e4:	2f 60       	ori	r18, 0x0F	; 15
  e6:	20 83       	st	Z, r18
	*PB &= ~(1<< (3-sel));
  e8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
  ec:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	28 1b       	sub	r18, r24
  f6:	39 0b       	sbc	r19, r25
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <seg+0x28>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <seg+0x24>
 106:	80 95       	com	r24
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
	*PA = c; //숫자 데이터 출력
 10e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 112:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 116:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <seg+0x42>
 120:	00 c0       	rjmp	.+0      	; 0x122 <seg+0x48>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <FND_4>:
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
	for (int i=0; i<sm; i++)
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	0d c0       	rjmp	.+26     	; 0x150 <FND_4+0x2a>
	{
		seg(i,*(inf+i));
 136:	f8 01       	movw	r30, r16
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	60 81       	ld	r22, Z
 13e:	ce 01       	movw	r24, r28
 140:	cc df       	rcall	.-104    	; 0xda <seg>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9f e1       	ldi	r25, 0x1F	; 31
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <FND_4+0x20>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <FND_4+0x26>
 14c:	00 00       	nop
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
	for (int i=0; i<sm; i++)
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	c8 17       	cp	r28, r24
 15a:	d9 07       	cpc	r29, r25
 15c:	64 f3       	brlt	.-40     	; 0x136 <FND_4+0x10>
	{
		seg(i,*(inf+i));
		_delay_ms(2);
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <Disp>:
   
char* Disp(unsigned long num) // 10진수 정수 ==> 16진수 문자열 변환 : 56506 ==> 0xDCBA  / 65535 ==> 0xFFFF
{					// 10진수 ==> 16진수 segment Image 배열
 168:	4f 92       	push	r4
 16a:	5f 92       	push	r5
 16c:	6f 92       	push	r6
 16e:	7f 92       	push	r7
 170:	8f 92       	push	r8
 172:	9f 92       	push	r9
 174:	af 92       	push	r10
 176:	bf 92       	push	r11
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <Disp+0x1e>
 186:	00 d0       	rcall	.+0      	; 0x188 <Disp+0x20>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	num %= 3600;
 18c:	20 e1       	ldi	r18, 0x10	; 16
 18e:	3e e0       	ldi	r19, 0x0E	; 14
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	a1 d1       	rcall	.+834    	; 0x4d8 <__udivmodsi4>
 196:	6b 01       	movw	r12, r22
 198:	7c 01       	movw	r14, r24
	int n1 = num % 10; // A :
 19a:	0f 2e       	mov	r0, r31
 19c:	fa e0       	ldi	r31, 0x0A	; 10
 19e:	8f 2e       	mov	r8, r31
 1a0:	91 2c       	mov	r9, r1
 1a2:	a1 2c       	mov	r10, r1
 1a4:	b1 2c       	mov	r11, r1
 1a6:	f0 2d       	mov	r31, r0
 1a8:	a5 01       	movw	r20, r10
 1aa:	94 01       	movw	r18, r8
 1ac:	95 d1       	rcall	.+810    	; 0x4d8 <__udivmodsi4>
 1ae:	69 83       	std	Y+1, r22	; 0x01
 1b0:	7a 83       	std	Y+2, r23	; 0x02
 1b2:	8b 83       	std	Y+3, r24	; 0x03
 1b4:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num/10)%6; // B(11)
 1b6:	ca 01       	movw	r24, r20
 1b8:	b9 01       	movw	r22, r18
 1ba:	26 e0       	ldi	r18, 0x06	; 6
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	8a d1       	rcall	.+788    	; 0x4d8 <__udivmodsi4>
 1c4:	2b 01       	movw	r4, r22
 1c6:	3c 01       	movw	r6, r24
	int n3 = (num/60)%10; // C(12)
 1c8:	c7 01       	movw	r24, r14
 1ca:	b6 01       	movw	r22, r12
 1cc:	2c e3       	ldi	r18, 0x3C	; 60
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	81 d1       	rcall	.+770    	; 0x4d8 <__udivmodsi4>
 1d6:	ca 01       	movw	r24, r20
 1d8:	b9 01       	movw	r22, r18
 1da:	a5 01       	movw	r20, r10
 1dc:	94 01       	movw	r18, r8
 1de:	7c d1       	rcall	.+760    	; 0x4d8 <__udivmodsi4>
 1e0:	4b 01       	movw	r8, r22
 1e2:	5c 01       	movw	r10, r24
	int n4 = (num/600); //D(13)
 1e4:	c7 01       	movw	r24, r14
 1e6:	b6 01       	movw	r22, r12
 1e8:	28 e5       	ldi	r18, 0x58	; 88
 1ea:	32 e0       	ldi	r19, 0x02	; 2
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	73 d1       	rcall	.+742    	; 0x4d8 <__udivmodsi4>
	
	arr[0]= digit[n1];
 1f2:	e9 81       	ldd	r30, Y+1	; 0x01
 1f4:	fa 81       	ldd	r31, Y+2	; 0x02
 1f6:	ea 5f       	subi	r30, 0xFA	; 250
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	e0 e2       	ldi	r30, 0x20	; 32
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	80 83       	st	Z, r24
	arr[1]= digit[n2]; 
 202:	d2 01       	movw	r26, r4
 204:	aa 5f       	subi	r26, 0xFA	; 250
 206:	be 4f       	sbci	r27, 0xFE	; 254
 208:	8c 91       	ld	r24, X
 20a:	81 83       	std	Z+1, r24	; 0x01
	arr[2]= digit[n3];
 20c:	d4 01       	movw	r26, r8
 20e:	aa 5f       	subi	r26, 0xFA	; 250
 210:	be 4f       	sbci	r27, 0xFE	; 254
 212:	8c 91       	ld	r24, X
 214:	82 83       	std	Z+2, r24	; 0x02
	arr[3]= digit[n4];
 216:	d9 01       	movw	r26, r18
 218:	aa 5f       	subi	r26, 0xFA	; 250
 21a:	be 4f       	sbci	r27, 0xFE	; 254
 21c:	8c 91       	ld	r24, X
 21e:	83 83       	std	Z+3, r24	; 0x03
	sm = (num >599) ? 4 : (num >59) ? 3 :(num >9) ? 2 : 1;
 220:	88 e5       	ldi	r24, 0x58	; 88
 222:	c8 16       	cp	r12, r24
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	d8 06       	cpc	r13, r24
 228:	e1 04       	cpc	r14, r1
 22a:	f1 04       	cpc	r15, r1
 22c:	78 f4       	brcc	.+30     	; 0x24c <Disp+0xe4>
 22e:	8c e3       	ldi	r24, 0x3C	; 60
 230:	c8 16       	cp	r12, r24
 232:	d1 04       	cpc	r13, r1
 234:	e1 04       	cpc	r14, r1
 236:	f1 04       	cpc	r15, r1
 238:	60 f4       	brcc	.+24     	; 0x252 <Disp+0xea>
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	c8 16       	cp	r12, r24
 23e:	d1 04       	cpc	r13, r1
 240:	e1 04       	cpc	r14, r1
 242:	f1 04       	cpc	r15, r1
 244:	48 f0       	brcs	.+18     	; 0x258 <Disp+0xf0>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 c0       	rjmp	.+16     	; 0x25c <Disp+0xf4>
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <Disp+0xf4>
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <Disp+0xf4>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 260:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	FND_4(arr);
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	5e df       	rcall	.-324    	; 0x126 <FND_4>
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	bf 90       	pop	r11
 280:	af 90       	pop	r10
 282:	9f 90       	pop	r9
 284:	8f 90       	pop	r8
 286:	7f 90       	pop	r7
 288:	6f 90       	pop	r6
 28a:	5f 90       	pop	r5
 28c:	4f 90       	pop	r4
 28e:	08 95       	ret

00000290 <main>:
	_delay_ms(5);
}
int main(void)
{
    /* Replace with your application code */
    DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	81 bb       	out	0x11, r24	; 17
    DDRC = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x07;
 298:	87 e0       	ldi	r24, 0x07	; 7
 29a:	8a bb       	out	0x1a, r24	; 26
	SegPort(&PORTD, &PORTC);
 29c:	65 e3       	ldi	r22, 0x35	; 53
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	82 e3       	ldi	r24, 0x32	; 50
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	11 df       	rcall	.-478    	; 0xc8 <SegPort>
	//shift_time();
	EIMSK = 0x70; // 0111 0000b
 2a6:	80 e7       	ldi	r24, 0x70	; 112
 2a8:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2A; // 0010 1010b
 2aa:	8a e2       	ldi	r24, 0x2A	; 42
 2ac:	8a bf       	out	0x3a, r24	; 58
	TIMSK |= 0x01; // 0000 0001b - Timer 0 TCNT overflow interrupt
 2ae:	87 b7       	in	r24, 0x37	; 55
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0x04; // 0000 0100b - Timer 1 TCNT overflow interrupt
	//TIMSK |= 0x40; // 0100 0000b - Timer 2 TCNT overflow interrupt
	TCCR0 = 0x04; // 분주비 (Pre-Scaler) 64
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	83 bf       	out	0x33, r24	; 51
	//TCCR1B = 0x04;  // 분주비 (Pre-Scaler) 64
	//TCCR2 = 0x04;  // 분주비 (Pre-Scaler) 64
	
	SREG |= 0x80;
 2b8:	8f b7       	in	r24, 0x3f	; 63
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	8f bf       	out	0x3f, r24	; 63
	sei(); // interrupt 시작
 2be:	78 94       	sei

	while (1) 
    {   
		switch(opmode)
 2c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 2c4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 2c8:	89 2b       	or	r24, r25
 2ca:	41 f4       	brne	.+16     	; 0x2dc <main+0x4c>
		{   
			case 0 :  cnt=0; break;
 2cc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt>
 2d0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt+0x1>
 2d4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cnt+0x2>
 2d8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cnt+0x3>
			case 1 :   break; // 대기 상태 or 비동작 상태
			default :  break;
		}
		switch (state)
 2dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 2e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	99 f0       	breq	.+38     	; 0x310 <main+0x80>
 2ea:	1c f4       	brge	.+6      	; 0x2f2 <main+0x62>
 2ec:	89 2b       	or	r24, r25
 2ee:	39 f0       	breq	.+14     	; 0x2fe <main+0x6e>
 2f0:	3f c0       	rjmp	.+126    	; 0x370 <main+0xe0>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	01 f1       	breq	.+64     	; 0x338 <main+0xa8>
 2f8:	04 97       	sbiw	r24, 0x04	; 4
 2fa:	91 f1       	breq	.+100    	; 0x360 <main+0xd0>
 2fc:	39 c0       	rjmp	.+114    	; 0x370 <main+0xe0>
		{   
			case 0 : cnt=0; break;
 2fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt>
 302:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt+0x1>
 306:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cnt+0x2>
 30a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cnt+0x3>
 30e:	30 c0       	rjmp	.+96     	; 0x370 <main+0xe0>
			case 1 :  cnt++; break; // counter start
 310:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt>
 314:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cnt+0x1>
 318:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <cnt+0x2>
 31c:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <cnt+0x3>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	a1 1d       	adc	r26, r1
 324:	b1 1d       	adc	r27, r1
 326:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt>
 32a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <cnt+0x1>
 32e:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <cnt+0x2>
 332:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <cnt+0x3>
 336:	1c c0       	rjmp	.+56     	; 0x370 <main+0xe0>
			case 2 : break;  // count stop
			case 3 : cnt--; break; // counter restart
 338:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt>
 33c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cnt+0x1>
 340:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <cnt+0x2>
 344:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <cnt+0x3>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	a1 09       	sbc	r26, r1
 34c:	b1 09       	sbc	r27, r1
 34e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt>
 352:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <cnt+0x1>
 356:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <cnt+0x2>
 35a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <cnt+0x3>
 35e:	08 c0       	rjmp	.+16     	; 0x370 <main+0xe0>
			case 4 : cnt=0; // reset & wait 
 360:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt>
 364:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt+0x1>
 368:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cnt+0x2>
 36c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cnt+0x3>
		{ 
			case 0 : break;
			case 1 : break;
			default : break;
		} */
		       Disp(cnt);
 370:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <cnt>
 374:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <cnt+0x1>
 378:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cnt+0x2>
 37c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cnt+0x3>
 380:	f3 de       	rcall	.-538    	; 0x168 <Disp>
    }
 382:	9e cf       	rjmp	.-196    	; 0x2c0 <main+0x30>

00000384 <__vector_5>:
}
  

ISR(INT4_vect) // INT4 인터럽트 처리 루틴 : SW1
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
	opmode++;
 392:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 396:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <opmode+0x1>
 3a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <opmode>
	if(opmode>=OPMOOD_MAX) opmode=0;
 3a4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 3a8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 3ac:	03 97       	sbiw	r24, 0x03	; 3
 3ae:	24 f0       	brlt	.+8      	; 0x3b8 <__vector_5+0x34>
 3b0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <opmode+0x1>
 3b4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <opmode>
}
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_6>:
ISR(INT5_vect)  // INT5 인터럽트 처리 루틴 : SW2
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
	state++;
 3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <state+0x1>
 3e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
	if(state>=STATE_MAX) state=0;
 3e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 3ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 3ee:	05 97       	sbiw	r24, 0x05	; 5
 3f0:	24 f0       	brlt	.+8      	; 0x3fa <__vector_6+0x34>
 3f2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state+0x1>
 3f6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
}
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__vector_7>:

ISR(INT6_vect)  // INT6 인터럽트 처리 루틴 : SW3
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
	sur++;
 416:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 41a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 424:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(sur>=SUR_MAX) sur=0;
 428:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 42c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 430:	02 97       	sbiw	r24, 0x02	; 2
 432:	24 f0       	brlt	.+8      	; 0x43c <__vector_7+0x34>
 434:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 438:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
}
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
	 tcnt++;
 45e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tcnt>
 462:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tcnt+0x1>
 466:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <tcnt+0x2>
 46a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <tcnt+0x3>
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	a1 1d       	adc	r26, r1
 472:	b1 1d       	adc	r27, r1
 474:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <tcnt>
 478:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <tcnt+0x1>
 47c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <tcnt+0x2>
 480:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <tcnt+0x3>
	if (tcnt>=1000)
 484:	88 3e       	cpi	r24, 0xE8	; 232
 486:	93 40       	sbci	r25, 0x03	; 3
 488:	a1 05       	cpc	r26, r1
 48a:	b1 05       	cpc	r27, r1
 48c:	d8 f0       	brcs	.+54     	; 0x4c4 <__vector_16+0x7a>
	{
		cnt ++; tcnt = 0;
 48e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt>
 492:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cnt+0x1>
 496:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <cnt+0x2>
 49a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <cnt+0x3>
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	a1 1d       	adc	r26, r1
 4a2:	b1 1d       	adc	r27, r1
 4a4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt>
 4a8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <cnt+0x1>
 4ac:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <cnt+0x2>
 4b0:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <cnt+0x3>
 4b4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <tcnt>
 4b8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <tcnt+0x1>
 4bc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <tcnt+0x2>
 4c0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tcnt+0x3>
	}
}
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__udivmodsi4>:
 4d8:	a1 e2       	ldi	r26, 0x21	; 33
 4da:	1a 2e       	mov	r1, r26
 4dc:	aa 1b       	sub	r26, r26
 4de:	bb 1b       	sub	r27, r27
 4e0:	fd 01       	movw	r30, r26
 4e2:	0d c0       	rjmp	.+26     	; 0x4fe <__udivmodsi4_ep>

000004e4 <__udivmodsi4_loop>:
 4e4:	aa 1f       	adc	r26, r26
 4e6:	bb 1f       	adc	r27, r27
 4e8:	ee 1f       	adc	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	a2 17       	cp	r26, r18
 4ee:	b3 07       	cpc	r27, r19
 4f0:	e4 07       	cpc	r30, r20
 4f2:	f5 07       	cpc	r31, r21
 4f4:	20 f0       	brcs	.+8      	; 0x4fe <__udivmodsi4_ep>
 4f6:	a2 1b       	sub	r26, r18
 4f8:	b3 0b       	sbc	r27, r19
 4fa:	e4 0b       	sbc	r30, r20
 4fc:	f5 0b       	sbc	r31, r21

000004fe <__udivmodsi4_ep>:
 4fe:	66 1f       	adc	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	1a 94       	dec	r1
 508:	69 f7       	brne	.-38     	; 0x4e4 <__udivmodsi4_loop>
 50a:	60 95       	com	r22
 50c:	70 95       	com	r23
 50e:	80 95       	com	r24
 510:	90 95       	com	r25
 512:	9b 01       	movw	r18, r22
 514:	ac 01       	movw	r20, r24
 516:	bd 01       	movw	r22, r26
 518:	cf 01       	movw	r24, r30
 51a:	08 95       	ret

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
