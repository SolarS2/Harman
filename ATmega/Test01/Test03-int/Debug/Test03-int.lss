
Test03-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800112  00800112  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b22  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047b  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039b  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000268d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	49 c1       	rjmp	.+658    	; 0x2a8 <__vector_5>
  16:	00 00       	nop
  18:	68 c1       	rjmp	.+720    	; 0x2ea <__vector_6>
  1a:	00 00       	nop
  1c:	87 c1       	rjmp	.+782    	; 0x32c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a4 d0       	rcall	.+328    	; 0x20c <main>
  c4:	54 c1       	rjmp	.+680    	; 0x36e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LED_blink>:
char arr[5]; // // 세그먼트 이미지 정보를 담을 안전 영역
volatile int opmode=0, state=0, sur=0;

void LED_blink()
{
PORTA |= 0x07; // PortA의 0, 1, 2,번째 비트를 HIGH로 출력
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ed       	ldi	r24, 0xDF	; 223
  d0:	9e e2       	ldi	r25, 0x2E	; 46
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LED_blink+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LED_blink+0x10>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <seg>:
_delay_ms(3);
}
void seg(int sel, uint8_t c)
{   PORTC |= 0x0F;
  dc:	25 b3       	in	r18, 0x15	; 21
  de:	2f 60       	ori	r18, 0x0F	; 15
  e0:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1<< (3-sel));
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	43 e0       	ldi	r20, 0x03	; 3
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	48 1b       	sub	r20, r24
  ea:	59 0b       	sbc	r21, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <seg+0x1a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	4a 95       	dec	r20
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <seg+0x16>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	85 bb       	out	0x15, r24	; 21
	PORTD = c;
 100:	62 bb       	out	0x12, r22	; 18
 102:	08 95       	ret

00000104 <FND_4>:
	//_delay_ms(2);
}

void FND_4(char *inf) // segment Image 배열
{ int i;
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	8c 01       	movw	r16, r24
	for (i=0; i<4; i++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	0d c0       	rjmp	.+26     	; 0x12e <FND_4+0x2a>
	{
		seg(i,*(inf+i));
 114:	f8 01       	movw	r30, r16
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	60 81       	ld	r22, Z
 11c:	ce 01       	movw	r24, r28
 11e:	de df       	rcall	.-68     	; 0xdc <seg>
 120:	8f ed       	ldi	r24, 0xDF	; 223
 122:	9e e2       	ldi	r25, 0x2E	; 46
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <FND_4+0x20>
 128:	00 c0       	rjmp	.+0      	; 0x12a <FND_4+0x26>
 12a:	00 00       	nop
	//_delay_ms(2);
}

void FND_4(char *inf) // segment Image 배열
{ int i;
	for (i=0; i<4; i++)
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	c4 30       	cpi	r28, 0x04	; 4
 130:	d1 05       	cpc	r29, r1
 132:	84 f3       	brlt	.-32     	; 0x114 <FND_4+0x10>
	{
		seg(i,*(inf+i));
		_delay_ms(3);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <Disp>:

char* Disp(unsigned long num) // 10진수 정수 ==> 16진수 문자열 변환 : 56506 ==> 0xDCBA  / 65535 ==> 0xFFFF
{					//						==> 4digit 16진수 segment 출력
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
	int n1 = num % 16; // A :
 144:	db 01       	movw	r26, r22
 146:	af 70       	andi	r26, 0x0F	; 15
 148:	bb 27       	eor	r27, r27
	int n2 = (num/16)%16; // B(11)
 14a:	8b 01       	movw	r16, r22
 14c:	9c 01       	movw	r18, r24
 14e:	68 94       	set
 150:	13 f8       	bld	r1, 3
 152:	36 95       	lsr	r19
 154:	27 95       	ror	r18
 156:	17 95       	ror	r17
 158:	07 95       	ror	r16
 15a:	16 94       	lsr	r1
 15c:	d1 f7       	brne	.-12     	; 0x152 <Disp+0x14>
 15e:	f8 01       	movw	r30, r16
 160:	ef 70       	andi	r30, 0x0F	; 15
 162:	ff 27       	eor	r31, r31
	int n3 = (num/256)%16; // C(12)
 164:	07 2f       	mov	r16, r23
 166:	18 2f       	mov	r17, r24
 168:	29 2f       	mov	r18, r25
 16a:	33 27       	eor	r19, r19
 16c:	a8 01       	movw	r20, r16
 16e:	4f 70       	andi	r20, 0x0F	; 15
 170:	55 27       	eor	r21, r21
	int n4 = (num/4096); //D(13)
 172:	8b 01       	movw	r16, r22
 174:	9c 01       	movw	r18, r24
 176:	0f 2e       	mov	r0, r31
 178:	fc e0       	ldi	r31, 0x0C	; 12
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	17 95       	ror	r17
 180:	07 95       	ror	r16
 182:	fa 95       	dec	r31
 184:	d1 f7       	brne	.-12     	; 0x17a <Disp+0x3c>
 186:	f0 2d       	mov	r31, r0
 188:	98 01       	movw	r18, r16
	if(!(num/4096))
 18a:	61 15       	cp	r22, r1
 18c:	c0 e1       	ldi	r28, 0x10	; 16
 18e:	7c 07       	cpc	r23, r28
 190:	81 05       	cpc	r24, r1
 192:	91 05       	cpc	r25, r1
 194:	c8 f4       	brcc	.+50     	; 0x1c8 <Disp+0x8a>
	{
		n4 = 17;
		if (!(num/256))
 196:	6f 3f       	cpi	r22, 0xFF	; 255
 198:	71 05       	cpc	r23, r1
 19a:	81 05       	cpc	r24, r1
 19c:	91 05       	cpc	r25, r1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <Disp+0x64>
 1a0:	50 f4       	brcc	.+20     	; 0x1b6 <Disp+0x78>
		{
			n3=17;
			if(!(num/16))
 1a2:	60 31       	cpi	r22, 0x10	; 16
 1a4:	71 05       	cpc	r23, r1
 1a6:	81 05       	cpc	r24, r1
 1a8:	91 05       	cpc	r25, r1
 1aa:	40 f0       	brcs	.+16     	; 0x1bc <Disp+0x7e>
	int n2 = (num/16)%16; // B(11)
	int n3 = (num/256)%16; // C(12)
	int n4 = (num/4096); //D(13)
	if(!(num/4096))
	{
		n4 = 17;
 1ac:	21 e1       	ldi	r18, 0x11	; 17
 1ae:	30 e0       	ldi	r19, 0x00	; 0
		if (!(num/256))
		{
			n3=17;
 1b0:	41 e1       	ldi	r20, 0x11	; 17
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <Disp+0x8a>
	int n2 = (num/16)%16; // B(11)
	int n3 = (num/256)%16; // C(12)
	int n4 = (num/4096); //D(13)
	if(!(num/4096))
	{
		n4 = 17;
 1b6:	21 e1       	ldi	r18, 0x11	; 17
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <Disp+0x8a>
 1bc:	21 e1       	ldi	r18, 0x11	; 17
 1be:	30 e0       	ldi	r19, 0x00	; 0
		if (!(num/256))
		{
			n3=17;
 1c0:	41 e1       	ldi	r20, 0x11	; 17
 1c2:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num/16))
			{
				n2=17;
 1c4:	e1 e1       	ldi	r30, 0x11	; 17
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}
	}
	arr[0]= digit[n1];
 1c8:	a0 50       	subi	r26, 0x00	; 0
 1ca:	bf 4f       	sbci	r27, 0xFF	; 255
 1cc:	8c 91       	ld	r24, X
 1ce:	a8 e1       	ldi	r26, 0x18	; 24
 1d0:	b1 e0       	ldi	r27, 0x01	; 1
 1d2:	8c 93       	st	X, r24
	arr[1]= digit[n2];
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	8c 93       	st	X, r24
 1de:	11 97       	sbiw	r26, 0x01	; 1
	arr[2]= digit[n3];
 1e0:	fa 01       	movw	r30, r20
 1e2:	e0 50       	subi	r30, 0x00	; 0
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	80 81       	ld	r24, Z
 1e8:	12 96       	adiw	r26, 0x02	; 2
 1ea:	8c 93       	st	X, r24
 1ec:	12 97       	sbiw	r26, 0x02	; 2
	arr[3]= digit[n4];
 1ee:	f9 01       	movw	r30, r18
 1f0:	e0 50       	subi	r30, 0x00	; 0
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 81       	ld	r24, Z
 1f6:	13 96       	adiw	r26, 0x03	; 3
 1f8:	8c 93       	st	X, r24
 1fa:	13 97       	sbiw	r26, 0x03	; 3
	
	FND_4(arr);
 1fc:	cd 01       	movw	r24, r26
 1fe:	82 df       	rcall	.-252    	; 0x104 <FND_4>
	return arr;
}
 200:	88 e1       	ldi	r24, 0x18	; 24
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <main>:
    /* Replace with your application code */
	// 7-segment 사용 : 4 Module - C type
	// Pin assign : PCx - Segment img, PDx -module sel
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	//	  Pin assign :		PE4~PE6
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	84 bb       	out	0x14, r24	; 20
   DDRA = 0x07;
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	8a bb       	out	0x1a, r24	; 26
	// 인터럽트 설정
	EIMSK = 0x70; // 0111 0000b
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2A; // 0010 1010b
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80; // status Register - 인터럽트 허용
 220:	8f b7       	in	r24, 0x3f	; 63
 222:	80 68       	ori	r24, 0x80	; 128
 224:	8f bf       	out	0x3f, r24	; 63
	sei();		  // set interrupt - 인터럽트 시작
 226:	78 94       	sei
	
	unsigned long t=0;
 228:	c1 2c       	mov	r12, r1
 22a:	d1 2c       	mov	r13, r1
 22c:	76 01       	movw	r14, r12
	while (1) 
    {  
		switch(opmode) 
 22e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 232:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	41 f0       	breq	.+16     	; 0x24a <main+0x3e>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	49 f4       	brne	.+18     	; 0x250 <main+0x44>
		{
			
			case 0 :  t=0;break; 
			case 1 : t++;break;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	c8 1a       	sub	r12, r24
 242:	d8 0a       	sbc	r13, r24
 244:	e8 0a       	sbc	r14, r24
 246:	f8 0a       	sbc	r15, r24
 248:	03 c0       	rjmp	.+6      	; 0x250 <main+0x44>
	while (1) 
    {  
		switch(opmode) 
		{
			
			case 0 :  t=0;break; 
 24a:	c1 2c       	mov	r12, r1
 24c:	d1 2c       	mov	r13, r1
 24e:	76 01       	movw	r14, r12
			case 1 : t++;break;
			case 2 :  break; 
			default : break;
		}

		switch (state)
 250:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 254:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	41 f3       	breq	.-48     	; 0x22e <main+0x22>
 25e:	1c f4       	brge	.+6      	; 0x266 <main+0x5a>
 260:	89 2b       	or	r24, r25
 262:	21 f0       	breq	.+8      	; 0x26c <main+0x60>
 264:	0c c0       	rjmp	.+24     	; 0x27e <main+0x72>
 266:	05 97       	sbiw	r24, 0x05	; 5
 268:	3c f0       	brlt	.+14     	; 0x278 <main+0x6c>
 26a:	09 c0       	rjmp	.+18     	; 0x27e <main+0x72>
		{
		case 0 : t--; // counter start
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	c9 1a       	sub	r12, r25
 270:	d1 08       	sbc	r13, r1
 272:	e1 08       	sbc	r14, r1
 274:	f1 08       	sbc	r15, r1
 276:	03 c0       	rjmp	.+6      	; 0x27e <main+0x72>
		case 1 : break; // count stop	
		case 2 : continue;
case 3 : t--; // counter restart
case 4 :t=0; // reset & wait
 278:	c1 2c       	mov	r12, r1
 27a:	d1 2c       	mov	r13, r1
 27c:	76 01       	movw	r14, r12
		}

		switch (sur)
 27e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 282:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
		{
			
		}
		 Disp(t);
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	59 df       	rcall	.-334    	; 0x13e <Disp>
		 	if (t==15)
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	c8 16       	cp	r12, r24
 290:	d1 04       	cpc	r13, r1
 292:	e1 04       	cpc	r14, r1
 294:	f1 04       	cpc	r15, r1
			 {
				 LED_blink();
 296:	59 f6       	brne	.-106    	; 0x22e <main+0x22>
 298:	17 df       	rcall	.-466    	; 0xc8 <LED_blink>
 29a:	8f ed       	ldi	r24, 0xDF	; 223
 29c:	9e e2       	ldi	r25, 0x2E	; 46
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x92>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x98>
 2a4:	00 00       	nop
 2a6:	c3 cf       	rjmp	.-122    	; 0x22e <main+0x22>

000002a8 <__vector_5>:
				 }
				     }
}

ISR(INT4_vect) // INT4 인터럽트 처리 루틴 : SW1
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	opmode++;
 2b6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 2ba:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <opmode+0x1>
 2c4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <opmode>
	if(opmode>=OPMOOD_MAX) opmode=0;
 2c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <opmode>
 2cc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <opmode+0x1>
 2d0:	03 97       	sbiw	r24, 0x03	; 3
 2d2:	24 f0       	brlt	.+8      	; 0x2dc <__vector_5+0x34>
 2d4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <opmode+0x1>
 2d8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <opmode>
}
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_6>:
ISR(INT5_vect)  // INT5 인터럽트 처리 루틴 : SW2
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	state++;
 2f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 2fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <state+0x1>
 306:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
	if(state>=STATE_MAX) state=0;
 30a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 30e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <state+0x1>
 312:	03 97       	sbiw	r24, 0x03	; 3
 314:	24 f0       	brlt	.+8      	; 0x31e <__vector_6+0x34>
 316:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <state+0x1>
 31a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
}
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_7>:
ISR(INT6_vect)  // INT6 인터럽트 처리 루틴 : SW3
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
	sur++;
 33a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 33e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 348:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(sur>=SUR_MAX) sur=0;
 34c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 350:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 354:	03 97       	sbiw	r24, 0x03	; 3
 356:	24 f0       	brlt	.+8      	; 0x360 <__vector_7+0x34>
 358:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 35c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
}
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
