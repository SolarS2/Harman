
Test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800116  00800116  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b87  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047a  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fb  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c1       	rjmp	.+592    	; 0x28a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b3 d0       	rcall	.+358    	; 0x22a <main>
  c4:	0f c1       	rjmp	.+542    	; 0x2e4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SegPort>:
char arr[5]; // // 세그먼트 이미지 정보를 담을 안전 영역
char* PA = &PORTD, *PB = &PORTC;

void SegPort(char* p1, char* p2)
{
	PA = p1; PB = p2;
  c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PA+0x1>
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PA>
  d0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	08 95       	ret

000000da <seg>:
}

void seg(int sel, uint8_t c)
{   *PB |= 0x0F;
  da:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e2:	20 81       	ld	r18, Z
  e4:	2f 60       	ori	r18, 0x0F	; 15
  e6:	20 83       	st	Z, r18
	*PB &= ~(1<< (3-sel)); 
  e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	28 1b       	sub	r18, r24
  f6:	39 0b       	sbc	r19, r25
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <seg+0x28>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <seg+0x24>
 106:	80 95       	com	r24
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
	*PA = c; //숫자 데이터 출력
 10e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PA>
 112:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PA+0x1>
 116:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <seg+0x42>
 120:	00 c0       	rjmp	.+0      	; 0x122 <seg+0x48>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <FND_4>:
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
	for (int i=0; i<4; i++)
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	0d c0       	rjmp	.+26     	; 0x150 <FND_4+0x2a>
	{
		seg(i,*(inf+i));
 136:	f8 01       	movw	r30, r16
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	60 81       	ld	r22, Z
 13e:	ce 01       	movw	r24, r28
 140:	cc df       	rcall	.-104    	; 0xda <seg>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <FND_4+0x20>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <FND_4+0x26>
 14c:	00 00       	nop
	_delay_ms(1); // 0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
	for (int i=0; i<4; i++)
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	c4 30       	cpi	r28, 0x04	; 4
 152:	d1 05       	cpc	r29, r1
 154:	84 f3       	brlt	.-32     	; 0x136 <FND_4+0x10>
	{
		seg(i,*(inf+i));
		_delay_ms(5);
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <Disp>:

char* Disp(unsigned long num) // 10진수 정수 ==> 16진수 문자열 변환 : 56506 ==> 0xDCBA  / 65535 ==> 0xFFFF
{					// 10진수 ==> 16진수 segment Image 배열
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
	int n1 = num % 16; // A :  
 166:	db 01       	movw	r26, r22
 168:	af 70       	andi	r26, 0x0F	; 15
 16a:	bb 27       	eor	r27, r27
	int n2 = (num/16)%16; // B(11)
 16c:	8b 01       	movw	r16, r22
 16e:	9c 01       	movw	r18, r24
 170:	68 94       	set
 172:	13 f8       	bld	r1, 3
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	17 95       	ror	r17
 17a:	07 95       	ror	r16
 17c:	16 94       	lsr	r1
 17e:	d1 f7       	brne	.-12     	; 0x174 <Disp+0x14>
 180:	f8 01       	movw	r30, r16
 182:	ef 70       	andi	r30, 0x0F	; 15
 184:	ff 27       	eor	r31, r31
	int n3 = (num/256)%16; // C(12)
 186:	07 2f       	mov	r16, r23
 188:	18 2f       	mov	r17, r24
 18a:	29 2f       	mov	r18, r25
 18c:	33 27       	eor	r19, r19
 18e:	a8 01       	movw	r20, r16
 190:	4f 70       	andi	r20, 0x0F	; 15
 192:	55 27       	eor	r21, r21
	int n4 = (num/4096); //D(13)
 194:	8b 01       	movw	r16, r22
 196:	9c 01       	movw	r18, r24
 198:	0f 2e       	mov	r0, r31
 19a:	fc e0       	ldi	r31, 0x0C	; 12
 19c:	36 95       	lsr	r19
 19e:	27 95       	ror	r18
 1a0:	17 95       	ror	r17
 1a2:	07 95       	ror	r16
 1a4:	fa 95       	dec	r31
 1a6:	d1 f7       	brne	.-12     	; 0x19c <Disp+0x3c>
 1a8:	f0 2d       	mov	r31, r0
 1aa:	98 01       	movw	r18, r16
	if(!(num/4096))
 1ac:	61 15       	cp	r22, r1
 1ae:	c0 e1       	ldi	r28, 0x10	; 16
 1b0:	7c 07       	cpc	r23, r28
 1b2:	81 05       	cpc	r24, r1
 1b4:	91 05       	cpc	r25, r1
 1b6:	c8 f4       	brcc	.+50     	; 0x1ea <Disp+0x8a>
	{
		n4 = 17;
		if (!(num/256))
 1b8:	6f 3f       	cpi	r22, 0xFF	; 255
 1ba:	71 05       	cpc	r23, r1
 1bc:	81 05       	cpc	r24, r1
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <Disp+0x64>
 1c2:	50 f4       	brcc	.+20     	; 0x1d8 <Disp+0x78>
		{
			n3=17;
			if(!(num/16))
 1c4:	60 31       	cpi	r22, 0x10	; 16
 1c6:	71 05       	cpc	r23, r1
 1c8:	81 05       	cpc	r24, r1
 1ca:	91 05       	cpc	r25, r1
 1cc:	40 f0       	brcs	.+16     	; 0x1de <Disp+0x7e>
	int n2 = (num/16)%16; // B(11)
	int n3 = (num/256)%16; // C(12)
	int n4 = (num/4096); //D(13)
	if(!(num/4096))
	{
		n4 = 17;
 1ce:	21 e1       	ldi	r18, 0x11	; 17
 1d0:	30 e0       	ldi	r19, 0x00	; 0
		if (!(num/256))
		{
			n3=17;
 1d2:	41 e1       	ldi	r20, 0x11	; 17
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <Disp+0x8a>
	int n2 = (num/16)%16; // B(11)
	int n3 = (num/256)%16; // C(12)
	int n4 = (num/4096); //D(13)
	if(!(num/4096))
	{
		n4 = 17;
 1d8:	21 e1       	ldi	r18, 0x11	; 17
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <Disp+0x8a>
 1de:	21 e1       	ldi	r18, 0x11	; 17
 1e0:	30 e0       	ldi	r19, 0x00	; 0
		if (!(num/256))
		{
			n3=17;
 1e2:	41 e1       	ldi	r20, 0x11	; 17
 1e4:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num/16))
			{
				n2=17;
 1e6:	e1 e1       	ldi	r30, 0x11	; 17
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}
	}
	arr[0]= digit[n1];
 1ea:	ac 5f       	subi	r26, 0xFC	; 252
 1ec:	be 4f       	sbci	r27, 0xFE	; 254
 1ee:	8c 91       	ld	r24, X
 1f0:	ae e1       	ldi	r26, 0x1E	; 30
 1f2:	b1 e0       	ldi	r27, 0x01	; 1
 1f4:	8c 93       	st	X, r24
	arr[1]= digit[n2];
 1f6:	ec 5f       	subi	r30, 0xFC	; 252
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	11 96       	adiw	r26, 0x01	; 1
 1fe:	8c 93       	st	X, r24
 200:	11 97       	sbiw	r26, 0x01	; 1
	arr[2]= digit[n3];
 202:	fa 01       	movw	r30, r20
 204:	ec 5f       	subi	r30, 0xFC	; 252
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	80 81       	ld	r24, Z
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	8c 93       	st	X, r24
 20e:	12 97       	sbiw	r26, 0x02	; 2
	arr[3]= digit[n4];
 210:	f9 01       	movw	r30, r18
 212:	ec 5f       	subi	r30, 0xFC	; 252
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 81       	ld	r24, Z
 218:	13 96       	adiw	r26, 0x03	; 3
 21a:	8c 93       	st	X, r24
 21c:	13 97       	sbiw	r26, 0x03	; 3
	
  FND_4(arr);
 21e:	cd 01       	movw	r24, r26
 220:	82 df       	rcall	.-252    	; 0x126 <FND_4>
	
}
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <main>:
unsigned long cnt = 0, tcnt = 0; 

int main(void)
{
    /* Replace with your application code */
    DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	81 bb       	out	0x11, r24	; 17
    DDRC = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	84 bb       	out	0x14, r24	; 20
	SegPort(&PORTD, &PORTC);
 232:	65 e3       	ldi	r22, 0x35	; 53
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	82 e3       	ldi	r24, 0x32	; 50
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	46 df       	rcall	.-372    	; 0xc8 <SegPort>
	
	//TIMSK |= 0x01; // 0000 0001b - Timer 0 TCNT overflow interrupt
     TIMSK |= 0x04; // 0000 0100b - Timer 1 TCNT overflow interrupt
 23c:	87 b7       	in	r24, 0x37	; 55
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0x40; // 0100 0000b - Timer 2 TCNT overflow interrupt

	//TCCR0 = 0x04; // 분주비 (Pre-Scaler) 64 
	TCCR1B = 0x04;  // 분주비 (Pre-Scaler) 64
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	8e bd       	out	0x2e, r24	; 46
	//TCCR2 = 0x04;  // 분주비 (Pre-Scaler) 64 
	SREG |= 0x80;
 246:	8f b7       	in	r24, 0x3f	; 63
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	8f bf       	out	0x3f, r24	; 63
	sei(); // interrupt 시작
 24c:	78 94       	sei

	while (1) 
    {
		if (cnt >= 0x10000) cnt = 0;
 24e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt>
 252:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt+0x1>
 256:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <cnt+0x2>
 25a:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <cnt+0x3>
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	a1 40       	sbci	r26, 0x01	; 1
 262:	b1 05       	cpc	r27, r1
 264:	40 f0       	brcs	.+16     	; 0x276 <main+0x4c>
 266:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cnt>
 26a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt+0x1>
 26e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt+0x2>
 272:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt+0x3>
		Disp(cnt);
 276:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <cnt>
 27a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <cnt+0x1>
 27e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt+0x2>
 282:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cnt+0x3>
 286:	6c df       	rcall	.-296    	; 0x160 <Disp>
    }
 288:	e2 cf       	rjmp	.-60     	; 0x24e <main+0x24>

0000028a <__vector_14>:
	}
}*/


ISR(TIMER1_OVF_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
	tcnt++;
	//if (tcnt>=1000)
	{
		cnt ++; tcnt = 0;
 29c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt>
 2a0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt+0x1>
 2a4:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <cnt+0x2>
 2a8:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <cnt+0x3>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	a1 1d       	adc	r26, r1
 2b0:	b1 1d       	adc	r27, r1
 2b2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cnt>
 2b6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cnt+0x1>
 2ba:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <cnt+0x2>
 2be:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <cnt+0x3>
 2c2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 2c6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 2ca:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end+0x2>
 2ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x3>
	}
}
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
